version: 2.1

orbs:
  node: circleci/node@4.7 
  slack: circleci/slack@4.10.1


commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7} 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
            aws cloudformation delete-stack --stack-name frontend-<<parameters.Workflow_ID>>
            aws cloudformation delete-stack --stack-name backend-<<parameters.Workflow_ID>>         


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [test-frontend]
      - scan-backend:
          requires: [test-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [circleci-editor/90/circleci-project-setup]
      - configure-infrastructure:
          requires: [deploy-infrastructure]

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
    - checkout
    - restore_cache:
        keys: [backend-build]
    - run:
        name: Build back-end
        command: |
          cd backend
          npm install
          npm run build
          
  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend unit tests
          command: |
            cd frontend
            npm install
            npm run test
            
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend unit tests
          command: |
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend vulnerability scan
          command: |
           cd frontend
           npm install
           npm audit fix --audit-level=critical --force
           npm audit --audit-level=critical
           

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend vulnerability scan
          command: |
           cd backend
           npm install
           npm audit fix --audit-level=critical --force
           npm audit fix --audit-level=critical --force
           npm audit --audit-level=critical
           
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy\
              --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --template-file .circleci/files/backend.yml \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --template-file .circleci/files/frontend.yml \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances --filters Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[].Instances[].PublicIpAddress' --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.9.1-alpine3.12
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            ["da:8d:31:61:e3:11:6f:ba:ae:45:c2:25:0c:c2:e7:d1"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk update
            apk add --upgrade tar
            apk add --upgrade gzip
            apk add --upgrade curl
            apk add --upgrade bash
            apk add --update ansible
            apk add openssh-client
            pip3 install awscli     
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            pwd
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment 
